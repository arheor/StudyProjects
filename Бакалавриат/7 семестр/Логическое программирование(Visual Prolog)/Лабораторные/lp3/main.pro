% Copyright

implement main
    open core, console, math, string

%    задание 33.1---------------------------------------------------------+
%Определите в программе новое правило мать/2 и найдите всех матерей.

%domains
%    пол = муж; жен.
%
%class facts
%    чел : (string Человек, пол Пол).
%    родитель : (string Родитель, string Ребенок).
%
%class predicates
%    мать:(string Мать, string Ребенок) nondeterm (o,o).
%
%clauses
%    мать(Родитель, Ребенок) :- родитель(Родитель, Ребенок), чел(Родитель, жен).
%
%    чел("Вася",муж).    чел("Рома",муж).
%    чел("Гена",муж).    чел("Дима",муж).
%    чел("Коля",муж).    чел("Лена",жен).
%    чел("Юля",жен).    чел("Клава",жен).
%    чел("Уля",жен).    чел("Валя",жен).
%    родитель("Вася","Рома").    родитель("Вася","Дима").
%    родитель("Рома","Лена").    родитель("Гена","Юля").
%    родитель("Клава","Рома").    родитель("Клава","Дима").
%    родитель("Лена","Коля").    родитель("Уля","Гена").
%    родитель("Валя","Лена").
%
%    run() :-
%        мать(Мать, Ребенок),
%        write(Мать," - ",Ребенок), nl,
%        fail;
%        write("Конец перебора"),
%        _ = readchar().

%    задание 33.2------------------------------------------------------------
%    Определите в программе новые правила: сестра/2, бабушка/2, дядя/2,
%тетя/2, двоюродный_брат/2, двоюродная_сестра/2.

%domains
%    пол = муж; жен.
%
%class facts
%    чел : (string Человек, пол Пол).
%    родитель : (string Родитель, string Ребенок).
%
%class predicates
%    мать:(string Мать, string Ребенок) nondeterm (o,o).
%    сестра:(string Сестра, string Человек) nondeterm (o,o).
%    брат:(string Брат, string Человек) nondeterm (o,o).
%    предок:(string Ребенок, string Человек) nondeterm (i,o).
%    один_родитель: (string, string) nondeterm anyflow.
%    дочь: (string Дочь) nondeterm anyflow.
%
%clauses
%    мать(Родитель, Ребенок) :- родитель(Родитель, Ребенок), чел(Родитель, жен).
%    сестра(Сестра,Человек) :- чел(Сестра, жен), предок(Сестра, Человек).
%    брат(Брат,Человек) :- чел(Брат, муж), предок(Брат,Человек).
%    предок(Ребенок, Человек) :- один_родитель(Родитель, Ребенок),один_родитель(Родитель, Человек), not(Человек=Ребенок).
%    один_родитель(Родитель, Ребенок) :- родитель(Родитель, Ребенок),чел(Родитель,муж),!; родитель(Родитель, Ребенок),чел(Родитель,жен).
%    дочь(Дочь) :- чел(Дочь, жен), родитель(_, Дочь).
%
%    чел("Вася",муж).    чел("Рома",муж).
%    чел("Гена",муж).    чел("Дима",муж).
%    чел("Лена",жен).   чел("Женя",жен).
%    чел("Юля",жен).    чел("Клава",жен).
%    чел("Уля",жен).    чел("Валя",жен).
%
%    чел("Лиза",жен).    чел("Максим",муж).
%
%    родитель("Вася","Рома").    родитель("Клава","Рома").
%    родитель("Вася","Дима").    родитель("Клава","Дима").
%    родитель("Вася","Лиза").    родитель("Клава","Лиза").
%
%    родитель("Рома","Лена").   родитель("Валя","Лена").
%    родитель("Рома","Максим").   родитель("Валя","Максим").
%    родитель("Рома","Женя").   родитель("Валя","Женя").
%
%    родитель("Уля","Гена").    родитель("Гена","Юля").
%
%
%    run() :-
%%        мать(Мать, Ребенок),
%%        write(Мать," - ",Ребенок), nl,
%%        fail;
%%        write("Конец перебора"),
%%        _ = readchar().
%        дочь(Человек),
%        write(Человек), nl,
%        fail;
%        write("Конец перебора"),
%        _ = readchar().


%    задание 33.6------------------------------------------------------------+
%Разработайте и проверьте модель элемента ИЛИ-НЕ.

%domains
%    bool = [0..1].
%class facts
%    или:(bool In1,bool In2,bool Out).
%    не:(bool In,bool Out).
%class predicates
%    или_не:(bool In1,bool In2,bool Out) nondeterm anyflow.
%clauses
%    или(0,0,0). или(0,1,1). или(1,0,1). или(1,1,1).
%    не(0,1). не(1,0).
%    или_не(X1, X2, Z) :- или(X1, X2, Z1), не(Z1,Z).
%    run():-
%        или_не(X1,X2,Z),
%        writef("% % -> %",X1,X2,Z),nl,
%        fail();
%        write("Все!!!"),
%        _ = readchar().

%    задание 33.7------------------------------------------------------------+
%Разработайте и проверьте модель элемента xor/3 двухвходового сумматора по модулю 2.

%domains
%    bool = [0..1].
%class facts
%    и:(bool In1,bool In2,bool Out).
%    или:(bool In1,bool In2,bool Out).
%    не:(bool In,bool Out).
%class predicates
%    xor:(bool In1, bool In2, bool Out) nondeterm anyflow.
%clauses
%    и(0,0,0). и(0,1,0). и(1,0,0). и(1,1,1).
%    или(0,0,0). или(0,1,1). или(1,0,1). или(1,1,1).
%    не(0,1). не(1,0).
%    xor(X, Y, Z) :- не(Y,Y1), не(X,X1), и(X, Y1, Z1), и(X1, Y, Z2), или(Z1, Z2, Z).
%    run():-
%        xor(1,X2,Z),
%        writef("% % -> %",1,X2,Z),nl,
%        fail();
%        write("Все!!!"),
%        _ = readchar().

%    задание 33.8------------------------------------------------------------+
%Разработать программу вывода на экран всех горизонтальных отрезков, невырожденных в точку и не имеющих дубликатов.


%class facts
%    point:(integer X, integer Y).
%    i:unsigned := 0.
%
%class predicates
%    отрезок:(integer StartX, integer StartY,
%    integer EndX, integer EndY) nondeterm (o,o,o,o).
%    фильтр:(integer,integer,integer,integer) determ (i,i,i,i).
%
%clauses
%    point(1,1). point(1,2). point(1,4).
%    point(2,1). point(2,2). point(2,4).
%    point(3,2). point(4,1). point(4,3).
%
%    отрезок(X1,Y,X2,Y) :- point(X1,Y), point(X2,Y), X2>X1.
%    i := i+1.
%
%    run():-
%        отрезок(X1,Y1,X2,Y2),
%        writef("Найден отрезок (%,%)-(%,%)\n", X1,Y1,X2,Y2),
%        fail();
%        writef("Найдено % решений",i),
%        _ = readchar().

%    задание 33.9------------------------------------------------------------+
%Найти все невырожденные треугольники с периметром большим 9.

%class facts
%    point:(integer X, integer Y).
%
%class predicates
%    треугольник:(integer X1, integer Y1, integer X2, integer Y2, integer X3, integer Y3, real Периметр) nondeterm (o,o,o,o,o,o,o).
%    фильтр:(integer,integer,integer,integer,integer,integer) determ (i,i,i,i,i,i).
%
%clauses
%    point(1,1). point(1,2). point(1,4).
%    point(2,1). point(2,2). point(2,4).
%    point(3,2). point(4,1). point(4,3).
%    треугольник(X1,Y1,X2,Y2,X3,Y3,P) :- point(X1,Y1), point(X2,Y2), point(X3,Y3),
%    фильтр(X1,Y1,X2,Y2,X3,Y3),
%    P=sqrt((X1-X2)^2 + (Y1-Y2)^2) + sqrt((X1-X3)^2 + (Y1-Y3)^2) + sqrt((X2-X3)^2 + (Y2-Y3)^2).
%    фильтр(X1,Y1,X2,Y2,X3,Y3) :- X1<=X2, Y1<Y2, not((X1=X2, Y1=Y2)), not((X1=X3,Y1=Y3)),not((X2=X3,Y2=Y3)).
%
%    run():-
%        треугольник(X1,Y1,X2,Y2,X3,Y3,P), P>9,
%        writef("Найден треугольник: (%,%),(%,%),(%,%), его периметр: %.3 \n", X1,Y1,X2,Y2,X3,Y3,P),
%        fail();
%        write("Все!!!"),
%        _ = readchar().



%    задание 33.14------------------------------------------------------------+
%Найти решения следующих ребусов:
%вагон+вагон = состав
%ветка+ветка = дерево
%атака+удар+удар = нокаут
%дедка+бабка+репка = сказка

%class facts
%    цифра : (unsigned). % база цифр
%
%class predicates
%    состав : (unsigned,unsigned,unsigned) nondeterm (o,o,o).
%    дерево : (unsigned,unsigned,unsigned) nondeterm (o,o,o).
%    нокаут : (unsigned,unsigned,unsigned,unsigned) nondeterm (o,o,o,o).
%    сказка : (unsigned,unsigned,unsigned,unsigned) nondeterm (o,o,o,o).
%
%clauses
%    цифра(1). цифра(2). цифра(3). цифра(4). цифра(5).
%    цифра(6). цифра(7). цифра(8). цифра(9). цифра(0).
%
%    состав(Число1,Число2,Сумма) :- цифра(В), В>0,
%    цифра(А),А<>В,
%    цифра(Г),Г<>В,Г<>А,
%    цифра(О),О<>В,О<>А,О<>Г,
%    цифра(Н),Н>0, Н<>В,Н<>А,Н<>Г,Н<>О,
%    цифра(С),С>0,С<>В,С<>А,С<>Г,С<>О,С<>Н,
%    цифра(Т),Т<>В,Т<>А,Т<>Г,Т<>О,Т<>Н,Т<>С,
%    Число1=10000*В+1000*А+100*Г+10*О+Н,
%    Число2=Число1,
%    Сумма=Число1+Число2,
%    Слово = format("%u%u%u%u%u%u", С,О,С,Т,А,В),
%    Сумма = toTerm(Слово).
%
%    дерево(Число1,Число2,Сумма) :- цифра(В), В>0,
%    цифра(Е),Е<>В,
%    цифра(Т),Т<>В,Т<>Е,
%    цифра(К),К<>В,К<>Е,К<>Т,
%    цифра(А), А<>В,А<>Е,А<>Т,А<>К,
%    цифра(Д),Д>0,Д<>В,Д<>Е,Д<>Т,Д<>К,Д<>А,
%    цифра(Р),Р<>В,Р<>Е,Р<>Т,Р<>К,Р<>А,Р<>Д,
%    Число1=10000*В+1000*Е+100*Т+10*К+А,
%    Число2=Число1,
%    Сумма=Число1+Число2,
%    О=Сумма mod 10,
%    О<>В,О<>Е,О<>Т,О<>К,О<>А,О<>Д,О<>Р,
%    Слово = format("%u%u%u%u%u%u", Д,Е,Р,Е,В,О),
%    Сумма = toTerm(Слово).
%
%    нокаут(Число1,Число2,Число3,Сумма) :- цифра(А), А>0,
%    цифра(Т),Т<>А,
%    цифра(К),К<>А,К<>Т,
%    цифра(У),У<>А,У<>Т,У<>К,
%    цифра(Д), Д<>А,Д<>Т,Д<>К,Д<>У,
%    цифра(Р),Р<>А,Р<>Т,Р<>К,Р<>У,Р<>Д,
%    цифра(Н),Н<>0,Н<>А,Н<>Т,Н<>К,Н<>У,Н<>Д,Н<>Р,
%    цифра(О),О<>А,О<>Т,О<>К,О<>У,О<>Д,О<>Р,О<>Н,
%    Число1=10000*А+1000*Т+100*А+10*К+А,
%    Число2=1000*У+100*Д+10*А+Р,
%    Число3=Число2,
%    Сумма=Число1+Число2+Число3,
%    Слово = format("%u%u%u%u%u%u", Н,О,К,А,У,Т),
%    Сумма = toTerm(Слово).
%
%    сказка(Число1,Число2,Число3,Сумма) :- цифра(Д), Д>0,
%    цифра(Е),Е<>Д,
%    цифра(К),К<>Д,К<>Е,
%    цифра(А),А<>Д,А<>Е,А<>К,
%    цифра(Б), Б<>0, Б<>Д,Б<>Е,Б<>К,Б<>А,
%    цифра(Р),Р<>Д,Р<>Е,Р<>К,Р<>А,Р<>Б,
%    цифра(П),П<>Д,П<>Е,П<>К,П<>А,П<>Б,П<>Р,
%    цифра(С),С<>0,С<>Д,С<>Е,С<>К,С<>А,С<>Б,С<>Р,С<>П,
%    цифра(З),З<>Д,З<>Е,З<>К,З<>А,З<>Б,З<>Р,З<>П,З<>С,
%    Число1=10000*Д+1000*Е+100*Д+10*К+А,
%    Число2=10000*Б+1000*А+100*Б+10*К+А,
%    Число3=10000*Р+1000*Е+100*П+10*К+А,
%    Сумма=Число1+Число2+Число3,
%    Слово = format("%u%u%u%u%u%u", С,К,А,З,К,А),
%    Сумма = toTerm(Слово).
%
%
%    run():-
%%        состав(Число1,Число2,Сумма),
%%        дерево(Число1,Число2,Сумма),
%%        нокаут(Число1,Число2,Число3,Сумма),
%        сказка(Число1,Число2,Число3,Сумма),
%        write(Число1,"+",Число2,"+",Число3,"=",Сумма),nl,
%        fail;
%        write("\nПрограмма завершена"),
%        _=readchar().

%        задача 33,15---------------------------------------------------------------+
%Из девяти цифр от 1 до 9 составить «магический квадрат». Этот
%квадрат должен обладать тем свойством, чтобы суммы цифр в каждой его строке,
%столбце и диагоналях были одинаковы.

class facts
    цифра : (unsigned). % база цифр

class predicates
    ребус : (unsigned X1,unsigned X2,unsigned X3,
    unsigned Y1,unsigned Y2,unsigned Y3,
    unsigned Z1,unsigned Z2,unsigned Z3) nondeterm (o,o,o,o,o,o,o,o,o).

clauses
    цифра(1). цифра(2). цифра(3). цифра(4). цифра(5).
    цифра(6). цифра(7). цифра(8). цифра(9).

    ребус(X1,X2,X3,Y1,Y2,Y3,Z1,Z2,Z3) :- цифра(X1),
    цифра(X2),X2<>X1,
    цифра(X3),X3<>X2,X3<>X1,15 = X1+X2+X3,
    цифра(Y1),Y1<>X1,Y1<>X2,Y1<>X3,
    цифра(Y2), Y2<>X1,Y2<>X2,Y2<>X3,Y2<>Y1,
    цифра(Y3),Y3<>X1,Y3<>X2,Y3<>X3,Y3<>Y1,Y3<>Y2,
    цифра(Z1),Z1<>X1,Z1<>X2,Z1<>X3,Z1<>Y1,Z1<>Y2,Z1<>Y3,
    цифра(Z2),Z2<>X1,Z2>X2,Z2<>X3,Z2<>Y1,Z2<>Y2,Z2<>Y3,Z2<>Z1,
    цифра(Z3),Z3<>X1,Z3<>X2,Z3<>X3,Z3<>Y1,Z3<>Y2,Z3<>Y3,Z3<>Z1,Z3<>Z2,

    Y1+Y2+Y3 = 15,
    Z1+Z2+Z3= 15,
    X1+Y2+Z3 = 15,
    X3+Y2+Z1 = 15,
    X1+Y1+Z1 = 15,
    X2+Y2+Z2 = 15,
    X3+Y3+Z3 = 15.


    run():-
        ребус(X1,X2,X3,Y1,Y2,Y3,Z1,Z2,Z3),
        write("Решение:\n"),
        writef("% % %", X1,X2,X3),nl,
        writef("% % %", Y1,Y2,Y3),nl,
        writef("% % %", Z1,Z2,Z3),nl,fail;
        write("\nПрограмма завершена"),
        _=readchar().

end implement main

goal
    console::run(main::run).